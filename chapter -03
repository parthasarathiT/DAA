def find_max_min(arr):
    max_val = max(arr)
    min_val = min(arr)
    return min_val, max_val

# Test Case 1
arr1 = [5, 7, 3, 4, 9, 12, 6, 2]
min_val1, max_val1 = find_max_min(arr1)
print(f"Test Case 1 - Min = {min_val1}, Max = {max_val1}")

# Test Case 2
arr2 = [1, 3, 5, 7, 9, 11, 13, 15, 17]
min_val2, max_val2 = find_max_min(arr2)
print(f"Test Case 2 - Min = {min_val2}, Max = {max_val2}")

# Test Case 3
arr3 = [22, 34, 35, 36, 43, 67, 12, 13, 15, 17]
min_val3, max_val3 = find_max_min(arr3)
print(f"Test Case 3 - Min = {min_val3}, Max = {max_val3}")
def find_max_min(arr):
    return min(arr), max(arr)

# Test Case 1
arr1 = [2, 4, 6, 8, 10, 12, 14, 18]
min_val1, max_val1 = find_max_min(arr1)
print(f"Input: {arr1}")
print(f"Output: Min = {min_val1}, Max = {max_val1}")

# Test Case 2
arr2 = [11, 13, 15, 17, 19, 21, 23, 35, 37]
min_val2, max_val2 = find_max_min(arr2)
print(f"Input: {arr2}")
print(f"Output: Min = {min_val2}, Max = {max_val2}")

# Test Case 3
arr3 = [22, 34, 35, 36, 43, 67, 12, 13, 15, 17]
min_val3, max_val3 = find_max_min(arr3)
print(f"Input: {arr3}")
print(f"Output: Min = {min_val3}, Max = {max_val3}")
...
## merge array
def merge_sort(arr):
    if len(arr) > 1:
        mid = len(arr) // 2
        L = arr[:mid]
        R = arr[mid:]

        merge_sort(L)
        merge_sort(R)

        i = j = k = 0

        while i < len(L) and j < len(R):
            if L[i] < R[j]:
                arr[k] = L[i]
                i += 1
            else:
                arr[k] = R[j]
                j += 1
            k += 1

        while i < len(L):
            arr[k] = L[i]
            i += 1
            k += 1

        while j < len(R):
            arr[k] = R[j]
            j += 1
            k += 1

    return arr

# Test Cases
arr1 = [31, 23, 35, 27, 11, 21, 15, 28]
arr2 = [22, 34, 25, 36, 43, 67, 52, 13, 65, 17]

print("Input Array 1:", arr1)
print("Sorted Array 1:", merge_sort(arr1))

print("Input Array 2:", arr2)
print("Sorted Array 2:", merge_sort(arr2))
def merge_sort(arr):
    comparisons = 0

    def merge(left, right):
        nonlocal comparisons
        merged = []
        i = j = 0

        while i < len(left) and j < len(right):
            comparisons += 1
            if left[i] < right[j]:
                merged.append(left[i])
                i += 1
            else:
                merged.append(right[j])
                j += 1

        merged.extend(left[i:])
        merged.extend(right[j:])
        return merged

    if len(arr) <= 1:
        return arr

    mid = len(arr) // 2
    left = merge_sort(arr[:mid])
    right = merge_sort(arr[mid:])

    return merge(left, right), comparisons

# Test the Merge Sort Algorithm
arr1 = [12, 4, 78, 23, 45, 67, 89, 1]
sorted_arr1, comparisons1 = merge_sort(arr1)
print(comparisons1, sorted_arr1)

arr2 = [38, 27, 43, 3, 9, 82, 10]
sorted_arr2, comparisons2 = merge_sort(arr2)
print(comparisons2, sorted_arr2)
def quick_sort(arr):
    if len(arr) <= 1:
        return arr
    pivot = arr[len(arr) // 2]
    left = [x for x in arr if x < pivot]
    middle = [x for x in arr if x == pivot]
    right = [x for x in arr if x > pivot]
    return quick_sort(left) + middle + quick_sort(right)

# Test the Quick Sort algorithm on the array [19,72,35,46,58,91,22,31]
array = [19, 72, 35, 46, 58, 91, 22, 31]
sorted_array = quick_sort(array)
print(sorted_array)
...
def binary_search(arr, x):
    low = 0
    high = len(arr) - 1
    mid = 0
    count = 0

    while low <= high:
        mid = (high + low) // 2
        count += 1

        if arr[mid] < x:
            low = mid + 1
        elif arr[mid] > x:
            high = mid - 1
        else:
            return mid, count

    return -1, count

# Test the binary search algorithm
arr = [5, 10, 15, 20, 25, 30, 35, 40, 45]
x = 20
result, comparisons = binary_search(arr, x)

print("Element found at index:", result)
print("Number of comparisons made:", comparisons)
....
  def binary_search(arr, x):
    low = 0
    high = len(arr) - 1
    mid = 0

    while low <= high:
        mid = (high + low) // 2

        if arr[mid] < x:
            low = mid + 1
        elif arr[mid] > x:
            high = mid - 1
        else:
            return mid

    return -1

# Test the binary search algorithm
arr1 = [3, 9, 14, 19, 25, 31, 42, 47, 53]
x1 = 31
print(binary_search(arr1, x1))  # Output: 5

arr2 = [13, 19, 24, 29, 35, 41, 42]
x2 = 42
print(binary_search(arr2, x2))  # Output: 6

arr3 = [20, 40, 60, 80, 100, 120]
x3 = 60
print(binary_search(arr3, x3))  # Output: 2

