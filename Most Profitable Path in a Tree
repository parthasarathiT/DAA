from collections import defaultdict

def maxProfitablePath(n, edges, amount):
    graph = defaultdict(list)
    for a, b in edges:
        graph[a].append(b)
        graph[b].append(a)

    def dfs(node, parent):
        nonlocal max_profit
        if node == 0:
            return max(0, amount[node])
        
        total = amount[node]
        for neighbor in graph[node]:
            if neighbor != parent:
                total += max(0, dfs(neighbor, node))
        
        max_profit = max(max_profit, total)
        return total

    max_profit = 0
    dfs(0, -1)
    return max_profit

# Example Usage
n = 5
edges = [[0, 1], [0, 2], [1, 3], [1, 4]]
amount = [3, 2, -1, 5, 4]
print(maxProfitablePath(n, edges, amount))  # Output: 9
