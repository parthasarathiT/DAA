prims algorithm

import sys
class Graph:
    def _init_(self, vertices):
        self.V = vertices
        self.graph = [[0 for _ in range(vertices)] for _ in range(vertices)]

    def min_key(self, key, mst_set):
        min_val = sys.maxsize
        min_index = None

        for v in range(self.V):
            if key[v] < min_val and not mst_set[v]:
                min_val = key[v]
                min_index = v

        return min_index

    def prim_mst(self):
        parent = [None] * self.V
        key = [sys.maxsize] * self.V
        key[0] = 0
        mst_set = [False] * self.V

        parent[0] = -1

        for _ in range(self.V):
            u = self.min_key(key, mst_set)
            mst_set[u] = True

            for v in range(self.V):
                if self.graph[u][v] > 0 and not mst_set[v] and key[v] > self.graph[u][v]:
                    key[v] = self.graph[u][v]
                    parent[v] = u

        return parent

# Example Usage
g = Graph(5)
g.graph = [[0, 2, 0, 6, 0],
           [2, 0, 3, 8, 5],
           [0, 3, 0, 0, 7],
           [6, 8, 0, 0, 9],
           [0, 5, 7, 9, 0]]

result = g.prim_mst()
print("Edge \tWeight")
for i in range(1, g.V):
    print(f"{result[i]} - {i} \t{g.graph[i][result[i]]}")
Binary search


def binary_search(arr, x):
    left = 0
    right = len(arr) - 1

    while left <= right:
        mid = (left + right) // 2

        if arr[mid] == x:
            return mid
        elif arr[mid] < x:
            left = mid + 1
        else:
            right = mid - 1

    return -1  # Element not found

# Example usage
arr = [3, 4, 6, -9, 10, 8, 9, 30]
arr.sort()  # Sort the array in ascending order
print(binary_search(arr, 10))  # Output: 4
print(binary_search(arr, 100))  # Output: -1


Combination sum

def combinationSum(candidates, target):
    def backtrack(remain, comb, start):
        if remain == 0:
            result.append(list(comb))
            return
        elif remain < 0:
            return
        for i in range(start, len(candidates)):
            comb.append(candidates[i])
            backtrack(remain - candidates[i], comb, i)
            comb.pop()

    result = []
    backtrack(target, [], 0)
    return result

# Example usage:
candidates = [2, 3, 5]
target = 8
print("Input: candidates =", candidates, ", target =", target)
print("Output:", combinationSum(candidates, target))

Graph colouring


class Graph:
    def _init_(self, vertices):
        self.V = vertices
        self.graph = [[0 for _ in range(vertices)] for _ in range(vertices)]

    def is_safe(self, v, colour, c):
        for i in range(self.V):
            if self.graph[v][i] == 1 and colour[i] == c:
                return False
        return True

    def graph_colouring_util(self, m, colour, v):
        if v == self.V:
            return True

        for c in range(1, m+1):
            if self.is_safe(v, colour, c):
                colour[v] = c
                if self.graph_colouring_util(m, colour, v+1):
                    return True
                colour[v] = 0

    def graph_colouring(self, m):
        colour = [0] * self.V
        if not self.graph_colouring_util(m, colour, 0):
            return False

        print("Solution exists. The assigned colours are:")
        for c in colour:
            print(c, end=" ")
        return True

# Example Usage
g = Graph(4)
g.graph = [[0, 1, 1, 1],
           [1, 0, 1, 0],
           [1, 1, 0, 1],
           [1, 0, 1, 0]]
m = 3
g.graph_colouring(m)

Max element

mylist=[3,5,6,7,3,6]
print(max(mylist))
print(min(mylist))

Merge sort

def merge_sort(arr):
    if len(arr) <= 1:
        return arr
    mid = len(arr) // 2
    left = merge_sort(arr[:mid])
    right = merge_sort(arr[mid:])
    return merge(left, right)

def merge(left, right):
    result = []
    i = j = 0
    while i < len(left) and j < len(right):
        if left[i] < right[j]:
            result.append(left[i])
            i += 1
        else:
            result.append(right[j])
            j += 1
    result.extend(left[i:])
    result.extend(right[j:])
    return result

nums = [12, 4, 7, 1, 9, 3]
sorted_nums = merge_sort(nums)
print(sorted_nums)

Robbing money


def rob(nums):
    def rob_range(start, end):
        rob_next, rob_curr = 0, 0
        for i in range(start, end):
            rob_next, rob_curr = max(rob_curr + nums[i], rob_next), rob_next
        return rob_next

    if len(nums) == 1:
        return nums[0]
    return max(rob_range(0, len(nums) - 1), rob_range(1, len(nums)))

# Examples
nums1 = [2, 3, 2]
nums2 = [1, 2, 3, 1]

print("The maximum money you can rob without alerting the police is:", rob(nums1))  # Output: 3
print("The maximum money you can rob without alerting the police is:", rob(nums2))  # Output: 4
