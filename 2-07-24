def bubblesort(elements):
    # Looping from size of array from last index[-1] to index [0]
    for n in range(len(elements)-1, 0, -1):
        swapped = False
        for i in range(n):
            if elements[i] > elements[i + 1]:
                swapped = True
                # swapping data if the element is less than next element in the array
                elements[i], elements[i + 1] = elements[i + 1], elements[i]
        if not swapped:
            # exiting the function if we didn't make a single swap
            # meaning that the array is already sorted.
            return

elements = [39, 12, 18, 85, 72, 10, 2, 18]

print("Unsorted list is,")
print(elements)
bubblesort(elements)
print("Sorted Array is, ")
print(elements)
def bubble_sort_optimized(arr):
    n = len(arr)
    for i in range(n):
        swapped = False
        for j in range(0, n-i-1):
            if arr[j] > arr[j+1]:
                arr[j], arr[j+1] = arr[j+1], arr[j]
                swapped = True
        if not swapped:
            break
    return arr

# Test Cases
print(bubble_sort_optimized([64, 25, 12, 22, 11]))  # Expected Output: [11, 12, 22, 25, 64]
print(bubble_sort_optimized([29, 10, 14, 37, 13]))  # Expected Output: [10, 13, 14, 29, 37]
print(bubble_sort_optimized([3, 5, 2, 1, 4]))       # Expected Output: [1, 2, 3, 4, 5]
print(bubble_sort_optimized([1, 2, 3, 4, 5]))       # Expected Output: [1, 2, 3, 4, 5]
print(bubble_sort_optimized([5, 4, 3, 2, 1]))       # Expected Output: [1, 2, 3, 4, 5]
1.	Write code for  Insertion Sort that  manages arrays with duplicate elements during the sorting process. Ensure the algorithm's behavior when encountering duplicate values, including whether it preserves the relative order of duplicates and how it affects the overall sorting outcome. 
Examples:
1. Array with Duplicates:
o	Input: [3, 1, 4, 1, 5, 9, 2, 6, 5, 3]
o	Output: [1, 1, 2, 3, 3, 4, 5, 5, 6, 9]
2.	All Identical Elements:
o	Input: [5, 5, 5, 5, 5]
o	Output: [5, 5, 5, 5, 5]
3.	Mixed Duplicates:
o	Input: [2, 3, 1, 3, 2, 1, 1, 3]
o	Output: [1, 1, 1, 2, 2, 3, 3, 3]
def findKthPositive(arr, k):
    missing = []
    i = 1
    while len(missing) < k:
        if i not in arr:
            missing.append(i)
        i += 1
    return missing[-1]

# Example 1
arr1 = [2, 3, 4, 7, 11]
k1 = 5
output1 = findKthPositive(arr1, k1)
print(output1)  # Output: 9

# Example 2
arr2 = [1, 2, 3, 4]
k2 = 2
output2 = findKthPositive(arr2, k2)
print(output2)  # Output: 6
...
Vclass Solution:
    def findPeakElement(self, nums: List[int]) -> int:
        left, right = 0, len(nums) - 1
        while left < right:
            mid = left + (right - left) // 2
            if nums[mid] < nums[mid + 1]:
                left = mid + 1
            else:
                right = mid
        return left
def strStr(haystack, needle):
    if needle in haystack:
        return haystack.index(needle)
    else:
        return -1

# Example 1
haystack = "sadbutsad"
needle = "sad"
print(strStr(haystack, needle))  # Output: 0

# Example 2
haystack = "leetcode"
needle = "leeto"
print(strStr(haystack, needle))  # Output: -1


